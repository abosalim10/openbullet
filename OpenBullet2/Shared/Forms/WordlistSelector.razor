@using OpenBullet2.Entities
@using OpenBullet2.Helpers
@using OpenBullet2.Auth
@using Microsoft.Extensions.Primitives
@using GridMvc.Server
@using Microsoft.AspNetCore.Http
@using System.Globalization 
@inject AuthenticationStateProvider Auth
@inject IWordlistRepository WordlistRepo
@inject IModalService ModalService
@inject VolatileSettingsService VolatileSettings
@inject Microsoft.Extensions.Localization.IStringLocalizer<GuestEdit> Loc

<div class="container-fluid" style="overflow-y: auto;">
    <div class="row">
        <div class="col-12 mt-3" style="height: 250px; overflow-y: auto;">
            @if (gridLoad != null && !gridLoad.IsCanceled && gridLoad.IsCompleted)
            {
                <GridComponent @ref="gridComponent" T="WordlistEntity" Grid="@grid" OnRowClicked="@OnWordlistSelected"></GridComponent>
            }
            else
            {
                <p><em>@Loc["Loading"]...</em></p>
            }
        </div>
        <div class="col-12 mt-3" style="height: 250px; overflow-y: auto;">
            <textarea class="h-100" readonly>@linesPreview</textarea>
        </div>
        <div class="col-12 mt-3">
            <button class="btn btn-outline-success" @onclick="Select">@Loc["Select"]</button>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    private List<WordlistEntity> wordlists = new();
    private WordlistEntity selectedWordlist;
    private string linesPreview = string.Empty;
    private int uid = -1;

    private GridComponent<WordlistEntity> gridComponent;
    private CGrid<WordlistEntity> grid;
    private Task gridLoad;

    protected override async Task OnParametersSetAsync()
    {
        uid = await ((OBAuthenticationStateProvider)Auth).GetCurrentUserId();

        wordlists = uid == 0
            ? await WordlistRepo.GetAll().ToListAsync()
            : await WordlistRepo.GetAll().Include(w => w.Owner).Where(w => w.Owner.Id == uid).ToListAsync();

        Action<IGridColumnCollection<WordlistEntity>> columns = c =>
        {
            c.Add(w => w.Name).Titled(Loc["Name"]);
            c.Add(w => w.Type).Titled(Loc["Type"]);
            c.Add(w => w.Purpose).Titled(Loc["Purpose"]);
            c.Add(w => w.Total).Titled(Loc["Lines"]);
            c.Add(w => w.FileName).Titled(Loc["FileName"]);
        };

        var query = new QueryDictionary<StringValues>();
        query.Add("grid-page", "1");

        var client = new GridClient<WordlistEntity>(q => GetGridRows(columns, q), query, false, "wordlistsGrid", columns, CultureInfo.CurrentCulture)
            .Sortable()
            .Filterable()
            .WithMultipleFilters()
            .SetKeyboard(true)
            .Selectable(true, false, false);
        grid = client.Grid;

        // Try to set a previous filter
        if (VolatileSettings.GridQueries.ContainsKey("wordlistsGrid"))
        {
            grid.Query = VolatileSettings.GridQueries["wordlistsGrid"];
        }

        // Set new items to grid
        gridLoad = client.UpdateGrid();
        await gridLoad;
    }

    private ItemsDTO<WordlistEntity> GetGridRows(Action<IGridColumnCollection<WordlistEntity>> columns,
            QueryDictionary<StringValues> query)
    {
        VolatileSettings.GridQueries["wordlistsGrid"] = query;

        var server = new GridServer<WordlistEntity>(wordlists, new QueryCollection(query),
            true, "wordlistsGrid", columns, 15).Sortable().Filterable().WithMultipleFilters();

        // Return items to displays
        return server.ItemsToDisplay;
    }

    protected void OnWordlistSelected(object item)
    {
        if (item.GetType() == typeof(WordlistEntity))
        {
            selectedWordlist = (WordlistEntity)item;
            PreviewSelected();
        }
    }

    private void PreviewSelected()
    {
        var previewAmount = System.Math.Min(selectedWordlist.Total, 10);

        try
        {
            var lines = System.IO.File.ReadLines(selectedWordlist.FileName).Take(previewAmount);
            linesPreview = string.Join(Environment.NewLine, lines);
        }
        catch
        {
            linesPreview = string.Empty;
        }

        StateHasChanged();
    }

    private async Task Select()
    {
        if (selectedWordlist == null)
        {
            await js.AlertError(Loc["Uh-Oh"], Loc["SelectWordlistFirst"]);
            return;
        }

        BlazoredModal.Close(ModalResult.Ok(selectedWordlist));
    }
}
