@using OpenBullet2.Services
@using RuriLib.Models.Configs
@using OpenBullet2.Helpers
@using Microsoft.Extensions.Primitives
@using GridMvc.Server
@using Microsoft.AspNetCore.Http
@using System.Globalization
@inject ConfigService ConfigService
@inject PluginRepository PluginRepo
@inject IModalService ModalService
@inject VolatileSettingsService VolatileSettings
@inject Microsoft.Extensions.Localization.IStringLocalizer<ConfigSelector> Loc

<div style="overflow-y: auto; width: 1000px;">
    <div style="height: 250px; overflow-y: auto;">
        @if (gridLoad != null && !gridLoad.IsCanceled && gridLoad.IsCompleted)
        {
            <GridComponent @ref="gridComponent" T="Config" Grid="@grid" OnRowClicked="@OnConfigSelected"></GridComponent>
        }
        else
        {
            <p><em>@Loc["Loading"]...</em></p>
        }
    </div>
    <div style="height: 250px; margin-top: 15px; overflow-y: auto;">
        @if (selectedConfig != null)
        {
            <div class="w-100">
                <p style="color: orange;">@selectedConfig.Metadata.Name @Loc["by"] @selectedConfig.Metadata.Author</p>
            </div>
            <div class="w-100">
                <MarkdownRenderer MarkdownContent="@selectedConfig.Readme" />
            </div>
        }
    </div>
    <div>
        <button class="btn btn-outline-success" @onclick="Select">@Loc["Select"]</button>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    private List<Config> configs = new();
    private Config selectedConfig;

    private GridComponent<Config> gridComponent;
    private CGrid<Config> grid;
    private Task gridLoad;

    protected override async Task OnParametersSetAsync()
    {
        configs = ConfigService.Configs.OrderByDescending(c => c.Metadata.LastModified).ToList();

        Action<IGridColumnCollection<Config>> columns = c =>
        {
            c.Add(x => x.Metadata.Name).Titled(Loc["Name"]).Encoded(false).Sanitized(false)
                .RenderValueAs(x => $"<div class=\"grid-element-with-icon\"><img src=\"data:image/png;base64,{x.Metadata.Base64Image}\"/><span>{x.Metadata.Name}</span></div>");
            c.Add(x => x.Metadata.Author).Titled(Loc["Author"]);
            c.Add(x => x.Metadata.Category).Titled(Loc["Category"]);
            c.Add(x => x.IsRemote).Titled(Loc["Remote"]);
            c.Add(x => x.Settings.ProxySettings.UseProxies).Titled(Loc["Proxies"]);
            c.Add(x => x.Settings.DataSettings.AllowedWordlistTypesString).Titled(Loc["Wordlists"]);
            c.Add(x => x.Metadata.CreationDate).Titled(Loc["CreationDate"]);
            c.Add(x => x.Metadata.LastModified).Titled(Loc["LastModified"])
                .Sortable(true).SortInitialDirection(GridShared.Sorting.GridSortDirection.Descending);
        };

        var query = new QueryDictionary<StringValues>();
        query.Add("grid-page", "1");

        var client = new GridClient<Config>(q => GetGridRows(columns, q), query, false, "configsGrid", columns, CultureInfo.CurrentCulture)
            .Sortable()
            .Filterable()
            .WithMultipleFilters()
            .SetKeyboard(true)
            .Selectable(true, false, false);
        grid = client.Grid;

        // Try to set a previous filter
        if (VolatileSettings.GridQueries.ContainsKey("configsGrid"))
        {
            grid.Query = VolatileSettings.GridQueries["configsGrid"];
        }

        // Set new items to grid
        gridLoad = client.UpdateGrid();
        await gridLoad;
    }

    private ItemsDTO<Config> GetGridRows(Action<IGridColumnCollection<Config>> columns,
            QueryDictionary<StringValues> query)
    {
        VolatileSettings.GridQueries["configsGrid"] = query;

        var server = new GridServer<Config>(configs, new QueryCollection(query),
            true, "configsGrid", columns, 15).Sortable().Filterable().WithMultipleFilters();

        // Return items to displays
        return server.ItemsToDisplay;
    }

    protected void OnConfigSelected(object item)
    {
        if (item.GetType() == typeof(Config))
        {
            selectedConfig = (Config)item;
            StateHasChanged();
        }
    }

    private async Task Select()
    {
        if (selectedConfig == null)
        {
            await js.AlertError(Loc["Uh-Oh"], Loc["NoConfigSelected"]);
            return;
        }

        // Check if we have all required plugins
        var loadedPlugins = PluginRepo.GetPlugins();
        if (selectedConfig.Metadata.Plugins != null)
        {
            foreach (var plugin in selectedConfig.Metadata.Plugins)
            {
                if (!loadedPlugins.Any(p => p.FullName == plugin))
                {
                    if (!await js.Confirm(Loc["MissingPlugin"], $"{Loc["MissingPluginText"]}: {plugin}", Loc["Cancel"]))
                        return;
                }
            }
        }

        if (selectedConfig.HasCSharpCode())
        {
            if (!await js.Confirm(Loc["Danger"], Loc["DangerousConfig"]))
                return;
        }

        BlazoredModal.Close(ModalResult.Ok(selectedConfig));
    }
}
