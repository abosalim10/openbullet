@using RuriLib.Models.Variables
@inject Microsoft.Extensions.Localization.IStringLocalizer<Debugger> Loc

<div class="container-fluid my-3">
    <div class="row">
        <div class="list-group list-group-horizontal mb-3">
            @if (!isRunning)
            {
                <button class="btn btn-sm btn-outline-success" @onclick="Run"><span class="oi oi-media-play"></span> @Loc["Start"]</button>
            }
            else
            {
                <button class="btn btn-sm btn-outline-danger" @onclick="Stop"><span class="oi oi-media-stop"></span> @Loc["Stop"]</button>
            }
            @if (showVariables)
            {
                <button class="btn btn-sm btn-outline-primary" @onclick="ToggleView">@Loc["ShowLog"]</button>
            }
            else
            {
                <button class="btn btn-sm btn-outline-primary" @onclick="ToggleView">@Loc["ShowVariables"]</button>
            }
        </div>
    </div>
    <EditForm Model="options">
        <div class="row">
            <div class="col-auto pl-0 ml-0">
                <label>@Loc["TestData"]</label>
            </div>
            <div class="col align-self-stretch px-0">
                <InputText @bind-Value="options.TestData" />
            </div>
            <div class="col-auto">
                <label>@Loc["WordlistType"]</label>
                <InputSelect @bind-Value="options.WordlistType">
                    @foreach (var name in RuriLibSettings.Environment.WordlistTypes.Select(w => w.Name))
                    {
                        <option value="@name">@name</option>
                    }
                </InputSelect>
                <label class="ml-2">@Loc["PersistLog"]</label>
                <InputCheckbox @bind-Value="options.PersistLog" />
            </div>
        </div>
        <div class="row">
            <div class="col-auto pl-0 ml-0">
                <label>@Loc["UseProxy"]</label>
                <InputCheckbox @bind-Value="options.UseProxy" />
                <label class="ml-2">@Loc["TestProxy"]</label>
            </div>
            <div class="col align-self-stretch px-0">
                <InputText @bind-Value="options.TestProxy" />
            </div>
            <div class="col-auto">
                <label>@Loc["Type"]</label>
                <InputSelect @bind-Value="options.ProxyType">
                    @foreach (var name in Enum.GetNames(typeof(RuriLib.Models.Proxies.ProxyType)))
                    {
                        <option value="@name">@name</option>
                    }
                </InputSelect>
            </div>
        </div>
    </EditForm>
    <div class="row">
        <div class="col-12 pl-0 ml-0" style="font-size: 13px;">
            @if (!showVariables)
            {
                <BotLoggerViewer BotLogger="logger" @ref="loggerViewer" />
            }
            else
            {
                <VariablesViewer @ref="variablesViewer" />
            }
        </div>
    </div>
    <!--
    <div class="row mt-2">
        <div id="debugger-options" class="col-auto pl-0 ml-0">
            @if (variablesCollapsed)
            {
            <div>
                <span class="oi oi-caret-right mr-2" style="cursor: pointer;" @onclick="() => variablesCollapsed = false"></span>
                <h5 style="display: inline;">@Loc["Variables"] (@options.Variables.Count)</h5>
            </div>
            }
            else
            {
                <div>
                    <span class="oi oi-caret-bottom mr-2" style="cursor: pointer;" @onclick="() => variablesCollapsed = true"></span>
                    <h5 style="display: inline;">@Loc["Variables"] (@options.Variables.Count)</h5>
                </div>
                <RadzenTree Style="width: 100% !important; cursor: default;">
                    @foreach (var variable in options.Variables)
                    {
                        <RadzenTreeItem Text="@($"{variable.Name} ({variable.Type}){(variable.MarkedForCapture ? " [CAPTURED]" : "")}")">
                            @switch (variable)
                            {
                                default:
                                    <RadzenTreeItem Text="@variable.AsString()" />
                                    break;

                                case ListOfStringsVariable _:
                                    @foreach (var element in variable.AsListOfStrings())
                                    {
                                        <RadzenTreeItem Text="@element" />
                                    }
                                    break;

                                case DictionaryOfStringsVariable _:
                                    @foreach (var element in variable.AsDictionaryOfStrings())
                                    {
                                        <RadzenTreeItem Text="@($"{element.Key}: {element.Value}")" />
                                    }
                                    break;

                                case ByteArrayVariable _:
                                    <RadzenTreeItem Text="@(Convert.ToBase64String(variable.AsByteArray()))" />
                                    break;
                            }
                        </RadzenTreeItem>
                    }
                </RadzenTree>
            }
        </div>
    </div>
    -->
</div>

@code {
    private bool isRunning = false;
    private bool variablesCollapsed = true;
}