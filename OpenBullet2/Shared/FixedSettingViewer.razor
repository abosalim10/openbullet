@using RuriLib.Models.Blocks.Settings
@using RuriLib.Extensions 
 
<EditForm Model="BlockSetting">
    <div style="text-align: left;">
        @switch (BlockSetting.FixedSetting)
        {
            case StringSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-auto mr-0 pr-0">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        <InputText @bind-Value="@x.Value" />
                    </div>
                    <div class="col-auto ml-0 pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;

            case BoolSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-auto mr-0 pr-0">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch mt-1">
                        <InputCheckbox @bind-Value="@x.Value" />
                    </div>
                    <div class="col-auto ml-0 pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;

            case IntSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-auto mr-0 pr-0">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        <InputNumber @bind-Value="@x.Value" />
                    </div>
                    <div class="col-auto ml-0 pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;

            case EnumSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-auto mr-0 pr-0">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        <InputSelect @bind-Value="@x.Value">
                            @foreach (var name in Enum.GetNames(x.EnumType))
                            {
                                <option value="@name">@name</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                break;

            case FloatSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-auto mr-0 pr-0">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        <InputNumber @bind-Value="@x.Value" />
                    </div>
                    <div class="col-auto ml-0 pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;

            case ListOfStringsSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-12">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        <InputListOfStrings @bind-List="x.Value" />
                    </div>
                    <div class="col-auto pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;

            case DictionaryOfStringsSetting x:
                <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-12">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                    <div class="col align-self-stretch">
                        <InputDictionaryOfStrings @bind-Dictionary="x.Value" />
                    </div>
                    <div class="col-auto pl-0">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;

            case ByteArraySetting x:
                 <div class="row">
                    @if (DisplayName)
                    {
                        <div class="col-12">
                            <label style="line-height: 30px;">@Name</label>
                        </div>
                    }
                     <div class="col-12">
                        <InputByteArray @bind-Bytes="x.Value" />
                    </div>
                     <div class="col-12 mb-2">
                        <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => SwitchedMode.InvokeAsync(args))" />
                    </div>
                </div>
                break;
        }

    </div>
</EditForm>

@code {
    [Parameter] public BlockSetting BlockSetting { get; set; }
    [Parameter] public bool DisplayName { get; set; } = true;
    [Parameter] public EventCallback<SettingInputMode> SwitchedMode { get; set; }
    public string Name => BlockSetting.Name.ToReadableName();
}
