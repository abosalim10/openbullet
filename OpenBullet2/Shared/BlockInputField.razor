@using RuriLib.Models.Blocks.Settings
@using RuriLib.Extensions 

@if (BlockSetting != null)
{
    @switch (BlockSetting.InputMode)
    {
        case SettingInputMode.Variable:
            <div class="row">
                @if (DisplayName)
                {
                    <div class="col-auto mr-0 pr-0">
                        <label style="line-height: 30px;">@Name</label>
                    </div>
                }
                <div class="col align-self-stretch">
                    <input class="bg-variable" type="text" @bind="@BlockSetting.InputVariableName" />
                </div>
                <div class="col-auto ml-0 pl-0">
                    <SettingInputModeSelector BlockSetting="BlockSetting" SwitchedMode="@((args) => StateHasChanged())" />
                </div>
            </div>
            break;

        case SettingInputMode.Fixed:
            <FixedSettingViewer BlockSetting="BlockSetting" DisplayName="DisplayName" SwitchedMode="@((args) => StateHasChanged())" />
            break;

        case SettingInputMode.Interpolated:
            <InterpolatedSettingViewer BlockSetting="BlockSetting" DisplayName="DisplayName" SwitchedMode="@((args) => StateHasChanged())" />
            break;
    }
}

@code {
    [Parameter] public BlockSetting BlockSetting { get; set; }
    [Parameter] public bool DisplayName { get; set; } = true;
    public string Name => BlockSetting.Name.ToReadableName();

}
