@using RuriLib.Models.Blocks
@inject Microsoft.Extensions.Localization.IStringLocalizer<BlockSettingsViewer> Loc

<EditForm Model="Block">
    <p class="fg-secondary">
        <span><b>@Block.ReadableName (@Block.Id)</b></span><br />
        <span style="font-size: 12px;"><i>@Block.Descriptor.Description</i></span><br />
        <span style="font-size: 12px;"><i>@Block.Descriptor.ExtraInfo</i></span>
    </p>

    <h6 class="font-weight-bold fg-custom">@Loc["Label"]:</h6>
    <InputText Value="@Block.Label" ValueExpression="@(() => Block.Label)"
               ValueChanged="@((value) => { Block.Label = value; ChangedLabel.InvokeAsync(EventArgs.Empty); })" />

    <label>@Loc["SafeMode"]</label>
    <InputCheckbox @bind-Value="Block.Safe" />
</EditForm>

@if (Block.Descriptor.ReturnType.HasValue)
{
    <EditForm Model="Block">
        <h6 class="font-weight-bold fg-custom mt-3">@Loc["OutputVariable"] (@Block.Descriptor.ReturnType.Value):</h6>
        <InputText @bind-Value="Block.OutputVariable" />
        <label>@Loc["IsCapture"]</label>
        <InputCheckbox @bind-Value="Block.IsCapture" />
    </EditForm>
}

<h6 class="font-weight-bold fg-custom mt-3">@Loc["Settings"]:</h6>
@foreach (var setting in Block.Settings.Values)
{
    <BlockInputField BlockSetting="setting" />
}

@code {
    [Parameter] public AutoBlockInstance Block { get; set; }
    [Parameter] public EventCallback ChangedLabel { get; set; }
}
